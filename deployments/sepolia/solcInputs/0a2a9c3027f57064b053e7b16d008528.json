{
  "language": "Solidity",
  "sources": {
    "contracts/supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\ncontract supplyChain{\n\n\nevent manufacturerSetUpCompleted(address indexed manufacturer );\nevent wholsalerSetUpCompleted(address indexed whol);\nevent retailerSetUpCompleted(address indexed retail);\nevent consumerSetUpCompleted(address indexed consumer);\nevent productDetailsAdded(address indexed manufacturer);\nevent boughtFromManufacturer(address indexed buyer);\nevent productsFinished(address indexed manufacturer);\nevent boughtFromWholSaler(address indexed retailer);\n\n\nuint256 public immutable FEE;\n\nconstructor(uint256 _fee){\n  FEE= _fee;\n}\nstruct productDetails{\n    address manufacturer;\n    string  productName;\n    uint256 mfgYear;\n    uint256 quantity;\n    uint256 expireYear;\n    uint256 sellingPrice;\n    uint256 lotPrice;\n    uint256 uniqueId;\n}\n\n    // address[] manufacturers;\n    // address[] wholesalers;\n    // address[] retailers;\n    // address[] consumer;\n\n    struct ManDetails{\n         address manufacturer;\n         string name;\n         uint256 manId;\n    } \n    struct WholDetail{\n      address whol;\n      string name;\n      uint256 wholId;\n    }\n    struct RetailDetail{\n      address retail;\n      string name;\n      uint256 retailId;\n    }\n\n    struct ConsumerDetail{\n      address consumer;\n      string name;\n      uint256 consId;\n    }\n    \n  \n    mapping(uint256=>ManDetails) public  manDetails;\n    mapping(uint256=>WholDetail) public wholDetail;\n    mapping(uint256=>RetailDetail) public retailDetail ;\n    mapping(uint256=>ConsumerDetail) public consumerDetail;\n    mapping(uint256=>productDetails[]) public mfgProdHistory;\n    mapping(uint256=>productDetails[]) public wholProdHistory;\n    mapping(uint256=>productDetails[]) public retailProdHistory;\n    mapping(uint256=>productDetails[]) public consumerProdHistory;\n\n    function manufacturerSetDetails(string  memory name, uint256 id) public payable {\n     // require(id>manDetails.length,\"invalid id of manufacturer\");\n      require(id>0&&id<5,\"id cannot be lesser than 0 and greater than 5\");\n      require(manDetails[id].manufacturer==address(0),\"id already set , use another number \");   \n      require(msg.value>=FEE,\"Not enough FEE entered\");\n      manDetails[id]=ManDetails({\n      manufacturer:msg.sender,\n      name:name,\n      manId:id\n     });\n      emit manufacturerSetUpCompleted(msg.sender);\n    }\n\n    function wholsalersSetDetail(string memory name,uint256 id) public payable {\n      require(id>0&&id<5,\"id cannot be lesser than 0 and greater than 5\");\n      require(wholDetail[id].whol==address(0),\"id already set , use another\");\n      require(msg.value>=FEE,\"Not enough FEE entered\");\n      wholDetail[id]=WholDetail({\n        whol:msg.sender,\n        name:name,\n        wholId:id\n      });\n      emit wholsalerSetUpCompleted(msg.sender);\n    }\n\n    function retailSetDetail(string memory name,uint256 id) public  payable {\n       require(id>0&&id<5,\"id cannot be lesser than 0 and greater than 5\");\n       require(retailDetail[id].retail==address(0),\"id already set , use another\");\n       require(msg.value>=FEE,\"Not enough FEE entered\");\n       retailDetail[id]=RetailDetail({\n        retail:msg.sender,\n        name:name,\n        retailId:id\n      });\n      emit retailerSetUpCompleted(msg.sender);\n    }\n\n     function consumerSetDetail(string memory name,uint256 id) public  payable {\n      require(id>0&&id<5,\"id cannot be lesser than 0 and greater than 5\");\n      require(consumerDetail[id].consumer==address(0),\"id already set , use another\");\n      require(msg.value>=FEE,\"Not enough FEE entered\");\n      consumerDetail[id]=ConsumerDetail({\n        consumer:msg.sender,\n        name:name,\n        consId:id\n      });\n      emit consumerSetUpCompleted(msg.sender);\n    }\n\n   // function productListing\n  //buy from manufacturer , from wholsaler, from retailer , \n\n    function addProducts(\n    uint256 mfgId,\n    string memory name,\n    uint256 mfgYear,\n    uint256 quantity,\n    uint256 expireYear,\n    uint256 sellingPrice,\n    //uint256 lotPrice,\n    uint256 uniqueId\n     ) public  payable{\n\n       require(mfgId>0&&mfgId<5,\"id cannot be lesser than 0 and greater than 5\");\n       require(manDetails[mfgId].manufacturer!=address(0),\"invalid manufacturer id , create an account first \");\n       require(msg.value>0,\"no eth entered \");\n       require(msg.value>FEE/10);\n       \n       mfgProdHistory[mfgId].push(productDetails({\n        manufacturer:msg.sender,\n        productName:name,\n        mfgYear:mfgYear,\n        quantity:quantity,\n        expireYear:expireYear,\n        sellingPrice:sellingPrice,\n        lotPrice: quantity*sellingPrice,\n        uniqueId:uniqueId\n       })\n       );\n       emit productDetailsAdded(msg.sender);\n    }\n\nfunction buyFromManufacturer(\n      uint256 wholId,\n      uint256 mfgId,\n      uint256 quantityDemanded,\n      uint256 productId\n ) public payable {\n  if (wholProdHistory[wholId].length == 0) {\n    wholProdHistory;\n}\nrequire(wholDetail[wholId].whol != address(0), \"no such wholesaler\");\n\nproductDetails storage product = mfgProdHistory[mfgId][productId - 1];\nuint256 quantityAvailable = product.quantity;\nuint256 price=product.sellingPrice;\nuint256 newPrice;\nrequire(quantityDemanded>quantityAvailable/2,\"buy adequate product\");\nrequire(quantityDemanded<quantityAvailable,\"products Finished\");\nif(product.quantity==0){\n  emit productsFinished(product.manufacturer);\n}\nrequire(msg.value>=quantityDemanded*price,\"lesser amount \");\n                   (bool success ,)= manDetails[mfgId].manufacturer.call{value:msg.value}(\"\");\n                                 require(success,\"couldnt send money\");\n//lessen the quantity \n product.quantity-=quantityDemanded;\nnewPrice=6*(price)/5;\n\n         wholProdHistory[wholId].push(productDetails({\n         manufacturer:mfgProdHistory[mfgId][productId-1].manufacturer,\n         productName:mfgProdHistory[mfgId][productId-1].productName,\n         mfgYear:mfgProdHistory[mfgId][productId-1].mfgYear,\n         quantity:quantityDemanded,\n         expireYear:mfgProdHistory[mfgId][productId-1].expireYear,\n         sellingPrice:newPrice ,\n         lotPrice: quantityAvailable*mfgProdHistory[mfgId][productId-1].sellingPrice,\n         uniqueId:mfgProdHistory[mfgId][productId-1].uniqueId\n})\n);\nemit boughtFromManufacturer(msg.sender);\n//mfgProdHistory[mfgId][productId].quantity-=quantityDemanded;\n }\n\n function buyFromWholSaler(\n    uint256  retailId,\n    uint256 wholId,\n    uint256 quantityDemanded,\n    uint256 productId\n ) public payable{\nrequire(retailDetail[retailId].retail!=address(0),\"no such retailer exists\");\nproductDetails storage product = wholProdHistory[wholId][productId - 1];\nuint256 quantityAvailable=product.quantity;\nrequire(quantityDemanded<quantityAvailable,\"not adequate quantity\");\nuint256 price=product.sellingPrice;\nuint256 newPrice;\nnewPrice=6*price/5;\nrequire(msg.value>=quantityDemanded*price,\"lesser amount \");\n(bool success , )=wholDetail[wholId].whol.call{value:msg.value}(\"\");\nrequire(success,\"couldnt send money\");\n\n product.quantity-=quantityDemanded;\n\n \n retailProdHistory[retailId].push(productDetails({\n         manufacturer:product.manufacturer,\n         productName:product.productName,\n         mfgYear:product.mfgYear,\n         quantity:quantityDemanded,\n         expireYear:product.expireYear,\n         sellingPrice:newPrice ,\n         lotPrice: quantityAvailable*product.sellingPrice,\n         uniqueId:product.uniqueId\n\n }));\n//wholProdHistory[wholId][productId].quantity-=quantityDemanded;\nemit boughtFromWholSaler(msg.sender);\n\n }\n\nfunction buyFromRetailer(\n    uint256  retailId,\n    uint256 consId,\n    uint256 quantityDemanded,\n    uint256 productId\n) public payable{\nrequire(consumerDetail[consId].consumer!=address(0),\"no such consumer exists\");\nuint256 quantityAvailable=retailProdHistory[retailId][productId].quantity;\nrequire(quantityDemanded<quantityAvailable,\"not adequate quantity\");\nuint256 price=retailProdHistory[retailId][productId].sellingPrice;\nuint256 newPrice;\nnewPrice=6*price/5;\nrequire(msg.value>=quantityDemanded*price,\"lesser amount \");\nquantityAvailable-=quantityDemanded;\nconsumerProdHistory[consId].push(productDetails({\n         manufacturer:retailProdHistory[retailId][productId].manufacturer,\n         productName:retailProdHistory[retailId][productId].productName,\n         mfgYear:retailProdHistory[retailId][productId].mfgYear,\n         quantity:quantityDemanded,\n         expireYear:retailProdHistory[retailId][productId].expireYear,\n         sellingPrice:newPrice ,\n         lotPrice: quantityAvailable*retailProdHistory[retailId][productId].sellingPrice,\n         uniqueId:retailProdHistory[retailId][productId].uniqueId\n }));\n    \n}\n\n  productDetails[] public foundProducts;\n\n function productHistory(uint256 productId) public returns (\n  productDetails[] memory\n ){\n\n     for(uint256 i=1;i<=5;i++){\n         for(uint256 j=0; j<mfgProdHistory[i].length; j++){\n             if(mfgProdHistory[i][j].uniqueId == productId){\n                 foundProducts.push(productDetails({\n                      manufacturer:mfgProdHistory[i][j].manufacturer,\n                      productName:mfgProdHistory[i][j].productName,\n                      mfgYear:mfgProdHistory[i][j].mfgYear,\n                      quantity:mfgProdHistory[i][j].quantity,\n                      expireYear:mfgProdHistory[i][j].expireYear,\n                      sellingPrice:mfgProdHistory[i][j].sellingPrice,\n                      lotPrice: mfgProdHistory[i][j].sellingPrice,\n                       uniqueId:mfgProdHistory[i][j].uniqueId\n\n                 }));\n             }\n         }\n     }\n     for(uint256 i=1;i<=5;i++){\n         for(uint256 j=0; j<retailProdHistory[i].length; j++){\n             if(retailProdHistory[i][j].uniqueId == productId){\n                 foundProducts.push(productDetails({\n                      manufacturer:retailProdHistory[i][j].manufacturer,\n                      productName:retailProdHistory[i][j].productName,\n                      mfgYear:retailProdHistory[i][j].mfgYear,\n                      quantity:retailProdHistory[i][j].quantity,\n                      expireYear:retailProdHistory[i][j].expireYear,\n                      sellingPrice:retailProdHistory[i][j].sellingPrice,\n                      lotPrice: retailProdHistory[i][j].sellingPrice,\n                       uniqueId:retailProdHistory[i][j].uniqueId\n\n                 }));\n             }\n         }\n     }\n     for(uint256 i=1;i<=5;i++){\n         for(uint256 j=0; j<wholProdHistory[i].length; j++){\n             if(wholProdHistory[i][j].uniqueId == productId){\n                 foundProducts.push(productDetails({\n                      manufacturer:wholProdHistory[i][j].manufacturer,\n                      productName:wholProdHistory[i][j].productName,\n                      mfgYear:wholProdHistory[i][j].mfgYear,\n                      quantity:wholProdHistory[i][j].quantity,\n                      expireYear:wholProdHistory[i][j].expireYear,\n                      sellingPrice:wholProdHistory[i][j].sellingPrice,\n                      lotPrice: wholProdHistory[i][j].sellingPrice,\n                       uniqueId:wholProdHistory[i][j].uniqueId\n\n                 }));\n             }\n         }\n     }\n\nreturn foundProducts;\n }\n\n }\n\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}